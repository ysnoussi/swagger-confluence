buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:1.2"
    }
}

tasks.withType(JavaExec) {
    systemProperties System.properties
}

apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property "sonar.host.url", "$System.env.SONAR_URL"
        property "sonar.login", "$System.env.SONAR_USER"
        property "sonar.password", "$System.env.SONAR_PASS"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.source", "1.7"
        property "sonar.java.target", "1.7"
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
}

subprojects {
    group 'net.slkdev.swagger.confluence'

    version '2.3'

    if (project.hasProperty("release")) {
        version += '-RELEASE'
    }
    else {
        version += '-SNAPSHOT'
    }

    buildscript {
        repositories {
            mavenLocal()
            jcenter()
            mavenCentral()
        }
    }

    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    jacocoTestReport {
        reports {
            xml.enabled true
            html.destination "${buildDir}/jacocoHtml"
        }
        additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.7'
        targetCompatibility = '1.7'
    }

    task wrapper(type: Wrapper) {
        gradleVersion = 2.12
    }

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourceJar
    }

    test {
        jacoco {
            enabled true
        }
        reports {
            html.enabled = true
            junitXml.enabled = true
        }
    }

    publishing {
        def mavenReleaseUrl = "$System.env.MAVEN_PUBLISH_RELEASE_URL"
        def mavenSnapshotUrl = "$System.env.MAVEN_PUBLISH_SNAPSHOT_URL"
        def mavenUser = "$System.env.MAVEN_PUBLISH_USER"
        def mavenPass = "$System.env.MAVEN_PUBLISH_PASS"

        repositories {
            maven {
                if (mavenReleaseUrl != "null" || mavenSnapshotUrl != "null") {
                    if (mavenSnapshotUrl != "null" && project.version.endsWith('-SNAPSHOT')) {
                        url mavenSnapshotUrl
                    }
                    else {
                        url mavenReleaseUrl
                    }
                    credentials {
                        username mavenUser
                        password mavenPass
                    }
                }
                else {
                    url "${System.properties.'user.home'}/.m2/repository"
                }
            }
        }
    }
}
